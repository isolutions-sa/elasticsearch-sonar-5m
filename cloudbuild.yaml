# Top‐level timeout set to 14400 seconds (4 hours)
timeout: "28800s"

options:
  logging: CLOUD_LOGGING_ONLY

  # Pick a larger machine type than the default.
  # Available built‐in options: E2_SMALL, E2_MEDIUM (default), E2_HIGHCPU_8, E2_HIGHCPU_32
  machineType: "E2_HIGHCPU_32"

steps:
  # STEP 1: Java Compilation Step (Crucial for SonarQube Java analysis)
  # Elasticsearch uses Maven, so we'll use a Maven builder image.
  # This step will compile your Java code, producing .class files in target/classes.
  - id: 'Compile Java Project'
    name: 'maven:3-openjdk-17' # Recommended: Use a specific, stable Maven image with Java 17
    entrypoint: 'mvn'
    args:
      - 'clean'
      - 'install'
      - '-DskipTests' # Skip tests to speed up the build for scanning purposes
      - '-Dmaven.wagon.http.pool=false' # Optional: Workaround for some Maven/HTTP issues
      - '-Dmaven.wagon.http.retryHandler.count=3' # Optional: Retry downloads
      - '-Dmaven.repo.local=./.m2' # Optional: Cache Maven dependencies in the current workspace

  # STEP 2: SonarScanner Analysis Step
  - id: 'Run SonarScanner'
    name: 'sonarsource/sonar-scanner-cli'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p /tmp/.sonar
        mkdir -p /tmp/.scannerwork
        export SONAR_USER_HOME=/tmp/.sonar
        sonar-scanner \
          -Dsonar.projectKey=elasticsearch-sonar-5m-cloudbuild \
          -Dsonar.projectName=elasticsearch-sonar-5m-cloudbuild \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonar-demo-pt.iexperts.cloud \
          -Dsonar.login=sqp_7a6cc9cba865de08bc98f0b50a5c93d6701c23a6 \
          -Dsonar.log.level=DEBUG \
          -Dsonar.scanner.app.jvm.opts="-Xmx16g -Xms512m" \
          -Dsonar.exclusions=**/*.java \
          -Dsonar.working.directory=/tmp/.scannerwork
